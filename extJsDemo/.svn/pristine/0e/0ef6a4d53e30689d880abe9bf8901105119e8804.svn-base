package com.my9yu.charge.entity;

import java.util.Date;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.my9yu.charge.facade.ChargeCode;
import com.my9yu.charge.model.ChargeTarget;

/**
 * 充值记录实体
 * @author Birdy
 */
@Document
@CompoundIndexes({
	@CompoundIndex(name="state", def = "{\"state\":1}"),
	@CompoundIndex(name="completeTime", def = "{\"completeTime\":1}")
})
public class Charge {
	
	/**
	 * 集合分隔符
	 */
	public final static String SEPARATOR = "_";

	// 基础信息
	@Id
	/** 充值ID(server_order) */
	private String id;
	/** 充值服务器 */
	private int server;
	/** 充值订单号 */
	private String order;
	/** 充值类型 */
	private ChargeType type;
	/** 充值目标(由{@link ChargeType}决定含义) */
	private String content;
	/** 充值金额 */
	private int money;
	/** 充值得到的金币 */
	private int gold;
	/** 充值附加信息 */
	private String addition;
	/** 是否测试数据 */
	private boolean test;
	/** 充值记录创建时间 */
	private Date createTime;
	/** 充值订单状态 */
	private ChargeState state;

	// 重试信息
	/** 下次重试时间 */
	private Date retryTime;
	/** 重试次数 */
	private int retry;
	/** 最后的充值回应状态码 */
	private ChargeCode code;

	// 完成信息
	/** 完成充值时间 */
	private Date completeTime;
	/** 帐号名 */
	private String account;
	/** 角色名 */
	private String player;
	/** 目标标识 */
	private String target;
	/** 登录渠道 */
	private int channel;
	/** 充值渠道 */
	private int source;

	// 逻辑方法
	/** 重试成功 */
	public void retryComplete(ChargeCode code, ChargeTarget target) {
		this.retry++;
		this.code = code;
		this.state = ChargeState.COMPLETE;
		this.completeTime = new Date();
		this.addition = target.getAddition();
		if(target.getGold() > 0) {			
			this.gold = target.getGold();
		}
		this.account = target.getAccount();
		this.player = target.getPlayer();
		this.target = target.getTarget();
		this.channel = target.getChannel();
	}

	/** 重试失败 */
	public void retryFailed(ChargeCode code, Date nextRetryTime) {
		this.retry++;
		this.code = code;
		this.retryTime = nextRetryTime;
	}
	
	/** 重试成功 */
	public void checkComplete(ChargeCode code) {
		this.retry++;
		this.code = code;
		this.state = ChargeState.COMPLETE;
		this.completeTime = new Date();
	}

	/** 重试失败 */
	public void checkFailed(ChargeCode code, Date nextRetryTime) {
		this.retry++;
		this.code = code;
		this.retryTime = nextRetryTime;
	}

	// Getter and Setter
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public int getServer() {
		return server;
	}

	public void setServer(int server) {
		this.server = server;
	}
	
	public String getOrder() {
		return order;
	}

	public void setOrder(String order) {
		this.order = order;
	}

	public ChargeType getType() {
		return type;
	}

	public void setType(ChargeType type) {
		this.type = type;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public int getMoney() {
		return money;
	}

	public void setMoney(int money) {
		this.money = money;
	}

	public boolean isTest() {
		return test;
	}

	public void setTest(boolean test) {
		this.test = test;
	}

	public int getGold() {
		return gold;
	}

	public void setGold(int gold) {
		this.gold = gold;
	}

	public String getAddition() {
		return addition;
	}

	public void setAddition(String addition) {
		this.addition = addition;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public Date getRetryTime() {
		return retryTime;
	}

	public void setRetryTime(Date retryTime) {
		this.retryTime = retryTime;
	}

	public Date getCompleteTime() {
		return completeTime;
	}

	public void setCompleteTime(Date completeTime) {
		this.completeTime = completeTime;
	}

	public int getRetry() {
		return retry;
	}

	public void setRetry(int retry) {
		this.retry = retry;
	}

	public ChargeCode getCode() {
		return code;
	}

	public void setCode(ChargeCode code) {
		this.code = code;
	}

	public ChargeState getState() {
		return state;
	}

	public void setState(ChargeState state) {
		this.state = state;
	}

	public String getAccount() {
		return account;
	}

	public void setAccount(String account) {
		this.account = account;
	}

	public String getPlayer() {
		return player;
	}

	public void setPlayer(String player) {
		this.player = player;
	}

	public String getTarget() {
		return target;
	}

	public void setTarget(String target) {
		this.target = target;
	}

	public int getChannel() {
		return channel;
	}

	public void setChannel(int channel) {
		this.channel = channel;
	}

	public int getSource() {
		return source;
	}

	public void setSource(int source) {
		this.source = source;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((order == null) ? 0 : order.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Charge other = (Charge) obj;
		if (order == null) {
			if (other.order != null)
				return false;
		} else if (!order.equals(other.order))
			return false;
		return true;
	}

	// Static Method

	/** 构造方法 */
	public static Charge valueOfComplete(int server, String order, ChargeType type, String content, boolean test,
			int money, int gold, String addition, ChargeCode code, ChargeTarget target) {
		return valueOfComplete(0, server, order, type, content, test, money, gold, addition, code, target);
	}

	/** 构造方法 */
	public static Charge valueOfComplete(int source, int server, String order, ChargeType type, String content,
			boolean test, int money, int gold, String addition, ChargeCode code, ChargeTarget target) {
		Date now = new Date();
		Charge result = new Charge();
		result.id = toChargeId(server, order);
		result.server = server;
		result.order = order;
		result.type = type;
		result.content = content;
		result.money = money;
		result.gold = gold;
		result.addition = addition;
		result.test = test;
		result.createTime = now;
		result.state = ChargeState.COMPLETE;
		result.completeTime = now;
		result.code = code;
		result.account = target.getAccount();
		result.player = target.getPlayer();
		result.target = target.getTarget();
		result.channel = target.getChannel();
		result.source = source;
		return result;
	}

	/** 构造方法 */
	public static Charge valueOfRetry(int server, String order, ChargeType type, String content, boolean test,
			int money, int gold, String addition, ChargeCode code, Date retryTime) {
		return valueOfRetry(0, server, order, type, content, test, money, gold, addition, code, retryTime);
	}

	/** 构造方法 */
	public static Charge valueOfRetry(int source, int server, String order, ChargeType type, String content,
			boolean test, int money, int gold, String addition, ChargeCode code, Date retryTime) {
		Date now = new Date();
		Charge result = new Charge();
		result.id = toChargeId(server, order);
		result.server = server;
		result.order = order;
		result.type = type;
		result.content = content;
		result.money = money;
		result.gold = gold;
		result.addition = addition;
		result.test = test;
		result.createTime = now;
		result.state = ChargeState.WAIT;
		result.code = code;
		result.retryTime = retryTime;
		result.source = source;
		return result;
	}
	
	public static String toCollectionName(int operatorId) {
		return operatorId + SEPARATOR + Charge.class.getSimpleName();
	}
	
	public static String toChargeId(int serverId, String order) {
		return serverId + SEPARATOR + order;
	}

}
